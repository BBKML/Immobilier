#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script pour tester la validit√© finale des fixtures d√©ployables
"""

import os
import json

def test_deployable_fixtures():
    """Teste la validit√© des fixtures d√©ployables"""
    print("üß™ Test des fixtures d√©ployables...")
    
    # Fichiers d√©ployables √† tester
    deployable_files = [
        'deployable_final_cleaned_local_data_backup_fixed.json',
        'deployable_final_cleaned_fixed_data_backup.json',
        'deployable_final_cleaned_fixed_vehicules_data.json'
    ]
    
    for filename in deployable_files:
        if os.path.exists(filename):
            print(f"\nüîç Test de {filename}...")
            try:
                # Lire le fichier
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                print(f"   üìä {len(data)} objets trouv√©s")
                
                # Analyser les donn√©es
                typevehicules = {}
                marques = set()
                vehicules = []
                motos = []
                
                for item in data:
                    if 'model' in item and 'fields' in item:
                        fields = item['fields']
                        
                        if item['model'] == 'vehicules.typevehicule':
                            pk = item.get('pk')
                            nom = fields.get('nom', '').strip()
                            if pk and nom:
                                typevehicules[pk] = nom
                        
                        elif item['model'] == 'vehicules.marque':
                            nom = fields.get('nom', '').strip()
                            if nom:
                                marques.add(nom)
                        
                        elif item['model'] == 'vehicules.vehicule':
                            vehicules.append({
                                'pk': item.get('pk'),
                                'type_vehicule': fields.get('type_vehicule'),
                                'marque': fields.get('marque')
                            })
                        
                        elif item['model'] == 'vehicules.moto':
                            motos.append({
                                'pk': item.get('pk'),
                                'type_vehicule': fields.get('type_vehicule'),  # Devrait √™tre None
                                'marque': fields.get('marque')
                            })
                
                print(f"   üè∑Ô∏è TypeVehicules: {len(typevehicules)}")
                print(f"   üöó Marques: {len(marques)}")
                print(f"   üöô V√©hicules: {len(vehicules)}")
                print(f"   üèçÔ∏è Motos: {len(motos)}")
                
                # V√©rifier les r√©f√©rences de cl√©s √©trang√®res pour les v√©hicules
                invalid_vehicule_refs = 0
                for vehicule in vehicules:
                    if vehicule['type_vehicule'] not in typevehicules:
                        print(f"   ‚ùå V√©hicule {vehicule['pk']}: type_vehicule {vehicule['type_vehicule']} invalide")
                        invalid_vehicule_refs += 1
                
                # V√©rifier que les motos n'ont PAS de type_vehicule
                motos_with_type = 0
                for moto in motos:
                    if moto['type_vehicule'] is not None:
                        print(f"   ‚ùå Moto {moto['pk']}: type_vehicule pr√©sent ({moto['type_vehicule']})")
                        motos_with_type += 1
                
                # R√©sum√©
                if invalid_vehicule_refs == 0 and motos_with_type == 0:
                    print(f"   ‚úÖ Toutes les v√©rifications pass√©es")
                    print(f"   ‚úÖ Fichier {filename} pr√™t pour le d√©ploiement!")
                else:
                    print(f"   ‚ö†Ô∏è {invalid_vehicule_refs} r√©f√©rences v√©hicules invalides, {motos_with_type} motos avec type_vehicule")
                
            except Exception as e:
                print(f"   ‚ùå Erreur avec {filename}: {e}")
        else:
            print(f"‚ö†Ô∏è Fichier {filename} non trouv√©")
    
    print("\nüéØ Test des fixtures d√©ployables termin√©!")

if __name__ == "__main__":
    test_deployable_fixtures() 
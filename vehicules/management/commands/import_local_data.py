from django.core.management.base import BaseCommand
from django.core.management import call_command
import os
import json


class Command(BaseCommand):
    help = 'Importe automatiquement les donn√©es locales sur Render'

    def handle(self, *args, **options):
        self.stdout.write("üöÄ Import automatique des donn√©es locales...")
        
        # Essayer diff√©rents noms de fichiers de sauvegarde
        backup_files = [
            'local_data_backup.json',
            'data_backup.json',
            'vehicules_data.json'
        ]
        
        for backup_file in backup_files:
            if os.path.exists(backup_file):
                self.stdout.write(f"üîç Fichier trouv√©: {backup_file}")
                
                try:
                    # V√©rifier le contenu du fichier
                    with open(backup_file, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    
                    self.stdout.write(f"‚úÖ Fichier valide avec {len(data)} objets")
                    
                    # Importer les donn√©es
                    self.stdout.write("üîÑ Import des donn√©es en cours...")
                    call_command('loaddata', backup_file, verbosity=1)
                    
                    self.stdout.write(
                        self.style.SUCCESS(
                            f"üéâ Import r√©ussi depuis {backup_file}!\n"
                            f"üìä Toutes vos donn√©es locales sont maintenant sur Render!"
                        )
                    )
                    return
                    
                except json.JSONDecodeError as e:
                    self.stdout.write(
                        self.style.WARNING(f"‚ö†Ô∏è Fichier {backup_file} corrompu: {e}")
                    )
                    continue
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f"‚ùå Erreur import {backup_file}: {e}")
                    )
                    continue
        
        # Si aucun fichier n'a fonctionn√©, utiliser les donn√©es de test
        self.stdout.write(
            self.style.WARNING("‚ö†Ô∏è Aucun fichier de sauvegarde valide trouv√©, utilisation des donn√©es de test")
        )
        
        try:
            call_command('force_import_data')
            self.stdout.write(
                self.style.SUCCESS("‚úÖ Donn√©es de test import√©es avec succ√®s!")
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå Erreur import donn√©es de test: {e}")
            ) 
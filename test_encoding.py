#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour v√©rifier l'encodage des fichiers JSON
et diagnostiquer les probl√®mes d'encodage sur Render
"""

import os
import json
import chardet
import sys
from pathlib import Path

def detect_encoding(file_path):
    """D√©tecte l'encodage d'un fichier"""
    try:
        with open(file_path, 'rb') as f:
            raw_data = f.read()
            result = chardet.detect(raw_data)
            return result
    except Exception as e:
        return {'encoding': None, 'confidence': 0, 'error': str(e)}

def test_json_file(file_path):
    """Teste un fichier JSON pour les probl√®mes d'encodage"""
    print(f"\nüîç Test du fichier: {file_path}")
    print("=" * 50)
    
    if not os.path.exists(file_path):
        print(f"‚ùå Fichier non trouv√©: {file_path}")
        return False
    
    # D√©tecter l'encodage
    encoding_info = detect_encoding(file_path)
    print(f"üìä D√©tection d'encodage: {encoding_info}")
    
    # Tester diff√©rents encodages
    encodings_to_test = ['utf-8', 'utf-8-sig', 'latin-1', 'cp1252', 'iso-8859-1']
    
    for encoding in encodings_to_test:
        try:
            with open(file_path, 'r', encoding=encoding) as f:
                content = f.read()
                data = json.loads(content)
                print(f"‚úÖ Succ√®s avec encodage: {encoding}")
                print(f"   üìà Nombre d'objets: {len(data)}")
                return True
        except UnicodeDecodeError as e:
            print(f"‚ùå Erreur de d√©codage avec {encoding}: {e}")
        except json.JSONDecodeError as e:
            print(f"‚ùå Erreur JSON avec {encoding}: {e}")
        except Exception as e:
            print(f"‚ùå Erreur inattendue avec {encoding}: {e}")
    
    return False

def create_test_json():
    """Cr√©e un fichier JSON de test avec encodage UTF-8 explicite"""
    test_data = [
        {
            "model": "vehicules.client",
            "pk": 1,
            "fields": {
                "nom": "TEST CLIENT",
                "contact": "123456789",
                "adresse": "Adresse de test"
            }
        },
        {
            "model": "vehicules.vehicule",
            "pk": 1,
            "fields": {
                "immatriculation": "TEST123",
                "marque": 1,
                "modele": "Test Mod√®le",
                "annee": 2020,
                "prix": 15000.00
            }
        }
    ]
    
    # Sauvegarder avec encodage UTF-8 explicite
    with open('test_encoding.json', 'w', encoding='utf-8') as f:
        json.dump(test_data, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ Fichier de test cr√©√©: test_encoding.json")

def main():
    """Fonction principale"""
    print("üîß DIAGNOSTIC D'ENCODAGE JSON")
    print("=" * 60)
    
    # Cr√©er un fichier de test
    create_test_json()
    
    # Tester les fichiers existants
    files_to_test = [
        'data_backup.json',
        'local_data_backup.json',
        'vehicules_data.json',
        'test_encoding.json'
    ]
    
    success_count = 0
    for file_path in files_to_test:
        if test_json_file(file_path):
            success_count += 1
    
    print(f"\nüìä R√âSULTATS: {success_count}/{len(files_to_test)} fichiers valides")
    
    if success_count == 0:
        print("\nüö® Aucun fichier JSON valide trouv√©!")
        print("üí° Solutions possibles:")
        print("   1. V√©rifier l'encodage des fichiers source")
        print("   2. Recr√©er les fichiers avec encodage UTF-8")
        print("   3. Utiliser les donn√©es de fallback")
    else:
        print(f"\n‚úÖ {success_count} fichier(s) JSON valide(s) trouv√©(s)")

if __name__ == "__main__":
    main() 